<!doctype html>
%html{:lang => "en"}
	%head
		%meta{:charset => "utf-8"}
		%title git for svn users [[SHASH]]
		%meta{:content => "Presentatation about git for svn users", :name => "description"}
		%meta{:content => "Ivan Kuchin", :name => "author"}
		%meta{:content => "yes", :name => "apple-mobile-web-app-capable"}
		%meta{:content => "black-translucent", :name => "apple-mobile-web-app-status-bar-style"}
		%meta{:content => "width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no", :name => "viewport"}
		%link{:href => "reveal.js/css/reveal.min.css", :rel => "stylesheet"}
		%link#theme{:href => "reveal.js/css/theme/git.css", :rel => "stylesheet"}
		%link{:href => "reveal.js/lib/css/zenburn.css", :rel => "stylesheet"}
		:javascript
			document.write( '<link rel="stylesheet" href="reveal.js/css/print/' + ( window.location.search.match( /print-pdf/gi ) ? 'pdf' : 'paper' ) + '.css" type="text/css" media="print">' );
		/[if lt IE 9]
			<script src="reveal.js/lib/js/html5shiv.js"></script>
		:scss
			.reveal {
				table {
					margin-left: auto; margin-right: auto; width: 100%;
					td { text-align: center; }
				}

				code, pre code { background: rgba(255, 255, 255, 0.2); }
				pre code { word-wrap: break-word; }
				sub, sup { font-size: smaller; }
				p.small { font-size: 0.7em; }

				span.tag {
					font-style: italic;
					&::before { content: "@" }
				}

				p.commands {
					code { white-space: nowrap; margin: 0 3px; }
				}

				.narrowSnippets {
					pre {
						width: 50%;
						code { word-wrap: normal; }
					}
				}
			}

			.blackout .reveal .state-background { background: rgba( 0, 0, 0, 0.2 ); }
			.alert .reveal .state-background { background: rgba( 200, 50, 30, 0.2 ); }
			.soothe .reveal .state-background { background: rgba( 50, 200, 90, 0.2 ); }
			.whiteout .reveal .state-background { background: rgba( 255, 255, 255, 0.2 ); }
			.cobalt .reveal .state-background { background: rgba( 22, 152, 213, 0.2 ); }
			.mint .reveal .state-background { background: rgba( 22, 213, 75, 0.2 ); }
			.submerge .reveal .state-background { background: rgba( 12, 25, 77, 0.2); }
			.lila .reveal .state-background { background: rgba( 180, 50, 140, 0.2 ); }
			.sunset .reveal .state-background { background: rgba( 255, 122, 0, 0.2 ); }

	%body
		.reveal
			.slides

				%section#begin{data: {state: "blackout"}}
					%h1
						git
						%span{style: 'font-size: 0.2em'} for svn users
					.fragment{style: 'width: 70%; position: realtive; margin: 5px auto; padding: 5px; background: rgba(255, 255, 255, 0.05)'}
						%q Source code control the way it was meant to be!
						%p{style: 'text-align: right'} — Linus Torvalds
					%p.small{style: 'margin-top: 3em'}
						Presentation by Ivan Kuchin (PH-EDU/GS-AIS-GDI)

				%section{data: {state: "whiteout"}}
					%h2 Plan
					%p.fragment Why git?
					%p.fragment Cons
					%p.fragment What is git?
					%p.fragment Dos and don'ts
					%p.fragment Commands
					%p.fragment Hands-on
					%p.fragment Resources

				%section{data: {state: "soothe"}}
					%section
						%h2 Why git?
						%p Branching and merging
						%p Distributed
						%p Small and fast
						%p Robust
						%p Staging area
						%aside.notes
							%p Stash, clean, bisect
							%p Open source

					%section
						%h2 Why git?
						%h3 Branching and merging
						%p.fragment Branches are cheap
						%p.fragment Just named references, no copying or linking files, no history entry
						%p.fragment Create branch for every feature, test or experiment
						%p.fragment Easily switch branches
						%p.fragment Merge worthwhile and delete unseccessful
						%p.fragment No obligation to share branches

					%section
						%h2 Why git?
						%h3 Distributed VCS
						%p.fragment
							Every repository is self-contained
							%span.fragment and works as a backup
						%p.fragment
							Commit early, commit often, commit without disturbing others
							%sup.fragment helps merging
						%p.fragment Merge before sharing changes, not before you commit
						%p.fragment Server is not required until you need to share/publish work
						%p.fragment Different workflows (git flow, pull requests)
						%p.fragment Workflow depends on your team, not on your VCS
						%p.fragment <code>git init</code> is enough when you need source control

					%section
						%h2 Why git?
						%h3 Small and fast
						%p.fragment Nearly all operations run locally
						%p.fragment
							%a{href: "http://git-scm.com/about/small-and-fast"} Even network operations are several times faster than SVN (except clone)
						%p.fragment Was built for speed, performance and handling big projects from start
						.fragment
							An example:
							%p.fragment
								po/.svn
								%span.fragment — 4.1M
								%span.fragment — 1 revision
							%p.fragment
								po/.git
								%span.fragment — 3.2M
								%span.fragment — 1839 commits

					%section
						%h2 Why git?
						%h3 Robust
						%p.fragment Simple data model with integrity using SHA1 hashes
						%p.fragment Tracks content rather than differences/files
						%p.fragment Tries its best to protect your data
						%p.fragment Allows changing history (Ministry of Truth is satisfied)
						%p.fragment But makes it obviously alternative (Ministry of Truth is furious)

					%section
						%h2 Why git?
						%h3 Staging area
						%p.fragment Prepare and review changes before committing
						%p.fragment Easily split changes to multiple commits (including in one file)
						%p.fragment Commit while still working

				%section{data: {state: "alert"}}
					%h2 Cons
					%p.fragment No subtree checkout
					%p.fragment Commmits are not sequentially numbered
					%p.fragment Higher learning curve
					%p.fragment Directories are not tracked

				%section{data: {state: "cobalt"}}
					%section
						%h2 What is git?
						%h3 Parts
						%p Workspace — checked out files
						%p Stage area or Index — changes staged for commit
						%p Repository — commits, branches, tags
						%p Remote repository — named url (ssh, git, http, https, local/file), shared commits, branches, tags

					%section
						%h2 What is git?
						%h3 Example
						.fragment.fade-in{style: "font-size: 0.9em;"}
							<pre style="width: 90%">* <b><span style='color:#0A0'>4d89687</span></b> - <span style='color:#AAA'>change markdown code…</span> <b><span style='color:#AAA'>— Hakim El Hattab</span></b><b><span style='color:#A50'> (hakimel&#x2F;master, hakimel&#x2F;dev)</span></b><br>*   <b><span style='color:#0A0'>cb7a9c9</span></b> - <span style='color:#AAA'>merge master into dev</span> <b><span style='color:#AAA'>— Hakim El Hattab</span></b><b><span style='color:#A50'></span></b><br>|\  <br>| * <b><span style='color:#0A0'>5132ccd</span></b> - <span style='color:#AAA'>setup instructions #357</span> <b><span style='color:#AAA'>— Hakim El Hattab</span></b><b><span style='color:#A50'></span></b><br>* |   <b><span style='color:#0A0'>f157aec</span></b> - <span style='color:#AAA'>Merge branch &#x27;remotes-plugin-natural-bindings&#x27;…</span> <b><span style='color:#AAA'>— Hakim El Hattab</span></b><b><span style='color:#A50'></span></b><br>|\ \  <br>| * | <b><span style='color:#0A0'>352ec7e</span></b> - <span style='color:#AAA'>remotes plugin more…</span> <b><span style='color:#AAA'>— Ivan Kuchin</span></b><b><span style='color:#A50'> (HEAD, remotes-plugin-natural-bindings)</span></b><br>| |&#x2F;  <br>* | <b><span style='color:#0A0'>0344f2f</span></b> - <span style='color:#AAA'>fix ios flicker bug with linear transition #410</span> <b><span style='color:#AAA'>— Hakim El Hattab</span></b><b><span style='color:#A50'></span></b><br>* | <b><span style='color:#0A0'>028d918</span></b> - <span style='color:#AAA'>merge marked tweak</span> <b><span style='color:#AAA'>— Hakim El Hattab</span></b><b><span style='color:#A50'> (origin&#x2F;dev)</span></b><br>* | <b><span style='color:#0A0'>39b53a7</span></b> - <span style='color:#AAA'>minify marked #433</span> <b><span style='color:#AAA'>— Hakim El Hattab</span></b><b><span style='color:#A50'></span></b><br>* |   <b><span style='color:#0A0'>beda5f4</span></b> - <span style='color:#AAA'>merge showdown to marked migration</span> <b><span style='color:#AAA'>— Hakim El Hattab</span></b><b><span style='color:#A50'></span></b><br>|\ \  <br>| * | <b><span style='color:#0A0'>381da38</span></b> - <span style='color:#AAA'>Replace the ShowDown Markdown engine with marked</span> <b><span style='color:#AAA'>— Amit Kotlovski</span></b><b><span style='color:#A50'></span></b><br>| |&#x2F;  <br>* | <b><span style='color:#0A0'>0441c26</span></b> - <span style='color:#AAA'>Adds support for auto escaping HTML in code blocks.</span> <b><span style='color:#AAA'>— Raymond Camden</span></b><b><span style='color:#A50'></span></b><br>|&#x2F;  <br>* <b><span style='color:#0A0'>247771e</span></b> - <span style='color:#AAA'>update control styles…</span> <b><span style='color:#AAA'>— Hakim El Hattab</span></b><b><span style='color:#A50'> (origin&#x2F;master, origin&#x2F;HEAD, master)</span></b><br>* <b><span style='color:#0A0'>36a8f12</span></b> - <span style='color:#AAA'>add isVerticalSlide utility method</span> <b><span style='color:#AAA'>— Hakim El Hattab</span></b><b><span style='color:#A50'></span></b></pre>

					%section
						%h2 What is git?
						%h3 Objects
						%p 4 object types identified by SHA1 hash:
						:markdown
							* `blob` — file content
							* `tree` — «directory content» — names and permissions of `blobs` and `trees`
							* `commit` — author/committer + date, message, `tree` and parent `commits`
							* `tag` — tagger + date, message and `commit`

					%section
						%h2 What is git?
						%h3 References
						%p Names pointing at commits
						%ul
							%li Branches at <code>refs/heads/*</code>
							%li
								Tags at <code>refs/tags/*</code>
								%ul
									%li lightweight tags point to commits
									%li annotated and signed tags point to tag objects
							%li
								<code>HEAD</code> — reference to current commit/parent for next commit
								%br
								can be a reference to branch, tag or simply commit hash
							%li
								Remote branches at <code>refs/remotes/*</code>
								%ul
									%li Fetching from remote creates remote branches
									%li Pushing to remote changes remote branches
							%li Stashing work in progress also creates reference

					%section.narrowSnippets
						%h2 What is git?
						%h3 Merging
						%p Merge feature to master:
						:markdown
								>>                   C---D feature
								>>                  /
								>>             A---B master
						.fragment
							%p Fast-forward:
							:markdown
									>>             A---B---C---D master, feature
						.fragment
							%p No fast-forward:
							:markdown
									>>                   C---D feature
									>>                  /     \
									>>             A---B-------M master

					%section.narrowSnippets
						%h2 What is git?
						%h3 Merging and rebasing
						%p Merge non fast-forward feature to master:
						:markdown
								>>                   C---D feature
								>>                  /
								>>             A---B---E master
						.fragment
							%p Merge:
							:markdown
									>>                   C---D feature
									>>                  /     \
									>>             A---B---E---M master
						.fragment
							%p Rebase and merge:
							:markdown
									>>                       C'--D' feature
									>>                      /     \
									>>             A---B---E-------M master

					%section.narrowSnippets
						%h2 What is git?
						%h3 Cherry picking
						%p Copy change to master:
						:markdown
								>>                   C---X---E feature
								>>                  /
								>>             A---B master
						.fragment
							%p Cherry-pick:
							:markdown
									>>                   C---X---E feature
									>>                  /
									>>             A---B---X' master
						.fragment
							%p Rebase skips change:
							:markdown
									>>                       C'--E' feature
									>>                      /
									>>             A---B---X' master

					%section
						%h2 What is git?
						%h3 Revisions
						:markdown
							* SHA1 hash `2477`, `247771e129`, `247771e129f431fc751140d8da4c2fe60815a51f`
							* Reference `HEAD`, `master`, `heads/master`, `refs/heads/master`, `v1.0`
							* Ancestor commit `HEAD~`, `HEAD~~`, `master~10`, `master^`, `feature^2`
							* Reflog (prior value of reference) `HEAD@{1}`, `master@{10}`, `@{10}`, `@{yesterday}`
							* Upstream `@{u}`, `feature@{u}`
							* Read more about [gitrevisions](https://www.kernel.org/pub/software/scm/git/docs/gitrevisions.html)

					%section.narrowSnippets
						%h2 What is git?
						%h3 Ignore patterns
						:markdown
								*.zip
								/stacktrace.log
								/target/
								/out/
						:markdown
							* `.gitignore` — for team, tracked, can be in subdirectories
							* `.git/info/exclude` — for you
							* `~/.gitignore` — for all your repos (name specified in `~/.gitconfig`)

				%section{data: {state: "sunset"}}
					%h2 Dos and don'ts
					%p.fragment.highlight-green Commit early and often
					%p.fragment.highlight-green Choose (and agree with your team) a workflow
					%p.fragment.highlight-green Create branches
					%p.fragment.highlight-green Make useful commit messages
					%p.fragment.highlight-green Keep up to date
					%p.fragment.highlight-green Enforce standards
					%p.fragment.highlight-red Don't change <del>official</del> published history
					%p.fragment.highlight-red Don't change tags

				%section{data: {state: "submerge"}}
					%section
						%h2 Commands
						%h4.fragment{data: {fragment_index: 1}} porcelain (high level)
						%p.fragment.commands.small{data: {fragment_index: 3}}
							Main:
							- %w[add am archive bisect branch bundle checkout cherry-pick citool clean clone commit describe diff fetch format-patch gc grep gui init log merge mv notes pull push rebase reset revert rm shortlog show stash status submodule tag gitk].each do |command|
								%code= command
						%p.fragment.commands.small{data: {fragment_index: 4}}
							Ancillary:
							- %w[annotate archimport blame cherry config count-objects cvsexportcommit cvsimport cvsserver difftool fast-export fast-import filter-branch fsck get-tar-commit-id help imap-send instaweb merge-tree mergetool p4 pack-refs prune quiltimport reflog relink remote repack replace request-pull rerere rev-parse send-email show-branch svn verify-tag whatchanged].each do |command|
								%code= command
						%h4.fragment{data: {fragment_index: 2}} plumbing (low level)
						%p.fragment.commands.small{data: {fragment_index: 5}}
							- %w[apply cat-file check-attr check-ignore check-ref-format checkout-index column commit-tree credential credential-cache credential-store daemon diff-files diff-index diff-tree fetch-pack fmt-merge-msg for-each-ref hash-object http-backend http-fetch http-push index-pack ls-files ls-remote ls-tree mailinfo mailsplit merge-base merge-file merge-index merge-one-file mktag mktree name-rev pack-objects pack-redundant parse-remote patch-id prune-packed read-tree receive-pack rev-list send-pack sh-i18n sh-setup shell show-index show-ref stripspace symbolic-ref unpack-file unpack-objects update-index update-ref update-server-info upload-archive upload-pack var verify-pack write-tree].each do |command|
								%code= command

					%section
						%h2 Commands
						%h3 Essential 1/2
						%p.fragment <code>help</code>
						.fragment
							%p <code>init</code> — init repository
							%p <code>clone</code> — clone repository
						%p.fragment <code>status</code> — show status of workspace and stage area
						%p.fragment <code>add</code>, <code>mv</code>, <code>rm</code> or just <code>add -A</code> — stage changes
						%p.fragment <code>commit</code> — create commit
						%p.fragment <code>log</code> — show commit history
						%p.fragment <code>diff</code> — show changes
						.fragment
							%p <code>merge</code> — join histories
							%p <code>rebase</code> — move history changes
							%p <code>cherry-pick</code> — copy history changes

					%section
						%h2 Commands
						%h3 Essential 2/2
						%p.fragment <code>checkout</code> — checkout branch or paths
						%p.fragment <code>reset</code> — reset current HEAD, workspace, stage area
						.fragment
							%p <code>branch</code> — crete, list, delete branches
							%p <code>tag</code> — crete, list, delete tags
							%p <code>remote</code> — crete, list, delete remotes
						.fragment
							%p <code>fetch</code> — fetch remote refs and objects
							%p <code>pull</code> — fetch and merge from remote
							%p <code>push</code> — update remote refs and upload objects

					%section
						%h2 Commands
						%h3 Helpful
						%p.fragment <code>revert</code> — commit reverting change
						%p.fragment <code>clean</code> — remove untracked files
						%p.fragment <code>show</code> — show objects
						%p.fragment <code>blame</code> — show author of changes
						%p.fragment <code>stash</code> — put aside your work
						%p.fragment <code>bisect</code> — find <del>the bad guy</del> commit introducing bug
						%h3.fragment and advanced
						%p.fragment <code>svn</code> — work with svn repository
						%p.fragment <code>submodule</code>, <code>subtree</code> — attach foreigh repositories
						%p.fragment <code>filter-branch</code> — rewrite history using filters

					%section
						%h2 Commands
						%h3 Customize
						.fragment
							%h4 Define aliases
							:markdown
									[alias]
										s = status
										ci = commit
										a = add --all
										d = diff --ignore-space-change
										wd = diff --color-words
										lg = log --graph --all --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(bold white)— %an%C(reset)%C(bold yellow)%d%C(reset)' --abbrev-commit --date=relative
						.fragment
							%h4 Create your commands
							%p Everything in PATH like <code>git-*</code> can be called like <code>git *</code>

				%section{data: {state: "lila"}}
					- script, cache = %w[create-hello-world.sh .create-hello-world.cache]
					- system "./#{script} 2>&1 | haml > #{cache}" unless File.exist?(cache) && File.mtime(cache) > File.mtime(script)
					= File.read(cache)

				%section{data: {state: "mint"}}
					%section
						%h2 Resources
						%h3 Guis
						%ul
							%li builtin <code>git gui</code> and <code>gitk</code>
							%li
								%a{href: "http://www.jetbrains.com/idea/features/version_control.html"} IntelliJ IDEA Git Integration
								%span.tag OS X
								%span.tag Windows
								%span.tag Linux
							%li
								%a{href: "http://sourcetreeapp.com/"} Atlassian SourceTree
								%span.tag OS X
								%span.tag Windows
							%li
								= succeed ',' do
									%a{href: "http://gitx.frim.nl/"} GitX
								= succeed ',' do
									%a{href: "http://gitx.laullon.com/"} GitX (L)
								%a{href: "http://mac.github.com/"} GitHub Mac
								%span.tag OS X
							%li
								= succeed ',' do
									%a{href: "http://windows.github.com/"} GitHub Windows
								= succeed ',' do
									%a{href: "https://code.google.com/p/tortoisegit/"} TortoiseGit
								%a{href: "https://code.google.com/p/gitextensions/"} Git Extensions
								%span.tag Windows
							%li
								%a{href: "https://github.com/jessevdk/gitg"} gitg
								%span.tag Linux
							%li
								= succeed ',' do
									%a{href: "http://www.collab.net/giteyeapp"} GitEye
								= succeed ',' do
									%a{href: "http://www.syntevo.com/smartgithg/index.html"} SmartGit
								%a{href: "http://git-cola.github.io/"} git-cola
								%span.tag OS X
								%span.tag Windows
								%span.tag Linux

					%section
						%h2 Resources
						%h3 Links
						%ul
							%li
								%a{href: 'http://try.github.com/'} try.github.com
							%li
								%a{href: 'http://gitref.org/'} gitref.org
							%li
								%a{href: "http://www.vogella.com/articles/Git/article.html"} vogella.com/articles/Git/article.html
							%li
								%a{href: 'http://git-scm.com/about'} git-scm.com/about
							%li
								%a{href: 'http://git-scm.com/book'} git-scm.com/book
							%li
								%a{href: 'http://ndpsoftware.com/git-cheatsheet.html'} ndpsoftware.com/git-cheatsheet.html
								%a{href: 'https://github.com/ndp/git-cheatsheet'} @github
							%li
								%a{href: "https://www.kernel.org/pub/software/scm/git/docs/"} kernel.org/pub/software/scm/git/docs

				%section#end{data: {state: "blackout"}}
					%h1 so, git?
					%p.fragment{style: 'margin-top: 3em'}
						Created using:
						= succeed ',' do
							%a{href: "https://github.com/hakimel/reveal.js"} reveal.js
						= succeed ',' do
							%a{href: "http://haml-lang.com/"} HAML
						= succeed ',' do
							%a{href: "http://sass-lang.com/"} SASS
						%a{href: "http://daringfireball.net/projects/markdown/"} Markdown
						and
						%a{href: "http://git-scm.com/"} git
						:plain
							:)

		%script{:src => "reveal.js/lib/js/head.min.js"}
		%script{:src => "reveal.js/js/reveal.min.js"}
		:javascript
			Reveal.initialize({
				width: 1300,
				height: 875,
				margin: 0.05,
				minScale: 0.5,
				maxScale: window.location.search.match( /print-pdf/gi ) ? 1.0 : 10.0,

				controls: true,
				progress: true,
				history: true,
				center: true,
				theme: Reveal.getQueryHash().theme,
				transition: 'default',
				dependencies: [
					{ src: 'reveal.js/lib/js/classList.js', condition: function() { return !document.body.classList; } },
					//{ src: 'reveal.js/plugin/highlight/highlight.js', async: true, callback: function() { hljs.initHighlightingOnLoad(); } },
					{ src: 'reveal.js/plugin/zoom-js/zoom.js', async: true, condition: function() { return !!document.body.classList; } },
					{ src: 'reveal.js/plugin/notes/notes.js', async: true, condition: function() { return !!document.body.classList; } },
					{ src: 'reveal.js/plugin/remotes/remotes.js', async: true, condition: function() { return !!document.body.classList && !(document.location.hostname == 'localhost' || document.location.hostname == ''); } },
				]
			});
